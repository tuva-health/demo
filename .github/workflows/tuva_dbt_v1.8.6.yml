name: tuva_dbt_v1.8.6
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.9'

#######  Secrets #######
#######  BigQuery
  DBT_BIGQUERY_DEMO_TOKEN: ${{ secrets.DBT_BIGQUERY_DEMO_TOKEN }}
  DBT_BIGQUERY_DEMO_PROJECT: ${{ secrets.DBT_BIGQUERY_DEMO_PROJECT }}
#######  Fabric
  DBT_FABRIC_CI_HOST: ${{ secrets.DBT_FABRIC_CI_HOST }}
  DBT_FABRIC_SERVICE_PRINCIPAL_ID: ${{ secrets.DBT_FABRIC_SERVICE_PRINCIPAL_ID }}
  DBT_FABRIC_SERVICE_PRINCIPAL_SECRET: ${{ secrets.DBT_FABRIC_SERVICE_PRINCIPAL_SECRET }}
  DBT_FABRIC_TENANT_ID: ${{ secrets.DBT_FABRIC_TENANT_ID }}
  DBT_FABRIC_DEMO_DATABASE: ${{ secrets.DBT_FABRIC_DEMO_DATABASE }}
  DBT_FABRIC_CI_SCHEMA: ${{ secrets.DBT_FABRIC_CI_SCHEMA }}
#######  Redshift
  DBT_REDSHIFT_HOST: ${{ secrets.DBT_REDSHIFT_HOST }}
  DBT_REDSHIFT_CI_USER: ${{ secrets.DBT_REDSHIFT_CI_USER }}
  DBT_REDSHIFT_CI_PASSWORD: ${{ secrets.DBT_REDSHIFT_CI_PASSWORD }}
  DBT_REDSHIFT_CI_PORT: ${{ secrets.DBT_REDSHIFT_CI_PORT }}
  DBT_REDSHIFT_DEMO_DATABASE: ${{ secrets.DBT_REDSHIFT_DEMO_DATABASE }}
#######  Snowflake
  DBT_SNOWFLAKE_DEV_ACCOUNT: ${{ secrets.DBT_SNOWFLAKE_DEV_ACCOUNT }}
  DBT_SNOWFLAKE_DEV_DATABASE: ${{ secrets.DBT_SNOWFLAKE_DEV_DATABASE }}
  DBT_SNOWFLAKE_DEV_CI_PASSWORD: ${{ secrets.DBT_SNOWFLAKE_DEV_CI_PASSWORD }}
  DBT_SNOWFLAKE_DEV_CI_ROLE: ${{ secrets.DBT_SNOWFLAKE_DEV_CI_ROLE }}
  DBT_SNOWFLAKE_DEV_CI_SCHEMA: ${{ secrets.DBT_SNOWFLAKE_DEV_CI_SCHEMA }}
  DBT_SNOWFLAKE_DEV_CI_USER: ${{ secrets.DBT_SNOWFLAKE_DEV_CI_USER }}
  DBT_SNOWFLAKE_DEV_CI_WAREHOUSE: ${{ secrets.DBT_SNOWFLAKE_DEV_CI_WAREHOUSE }}

# Permissions needed for the comment action
permissions:
  contents: read
  pull-requests: write

jobs:
  #######  BigQuery
  bigquery:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dbt-core and BigQuery adapter
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core==1.8.6 dbt-bigquery

      - name: Create dbt profiles.yml for BigQuery
        run: |
          mkdir -p ./integration_tests/profiles/bigquery
          echo "default:
            outputs:
              dev:
                type: bigquery
                method: service-account
                project: tuva-project-demo
                keyfile: ./creds.json
                dataset: connector
                threads: 8
                timeout_seconds: 300
                priority: interactive
            target: dev" > ./integration_tests/profiles/bigquery/profiles.yml

      - name: Create BigQuery credentials file
        run: |
          echo "${{ secrets.DBT_BIGQUERY_DEMO_TOKEN }}" | base64 --decode > ./creds.json

      - name: dbt-deps
        run: dbt deps --profiles-dir ./integration_tests/profiles/bigquery

      - name: dbt-debug
        run: dbt debug --profiles-dir ./integration_tests/profiles/bigquery

      - name: dbt-build
        run: |
          dbt build --full-refresh --profiles-dir ./integration_tests/profiles/bigquery

      - name: Get the result
        if: ${{ always() }}
        run: echo "${{ steps.dbt-build.outputs.result }}"
        shell: bash


#######  Fabric
  fabric:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ODBC Driver 18 for SQL Server
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18

      - name: Install dbt-core and Fabric adapter
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core==1.8.6 dbt-fabric

      - name: dbt-deps
        run: dbt deps --profiles-dir ./integration_tests/profiles/fabric

      - name: dbt-debug
        run: dbt debug --profiles-dir ./integration_tests/profiles/fabric

      - name: dbt-build
        run: |
          dbt build --full-refresh --profiles-dir ./integration_tests/profiles/fabric

      - name: Get the result
        if: ${{ always() }}
        run: echo "${{ steps.dbt-build.outputs.result }}"
        shell: bash

#######  Redshift
  redshift:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dbt-core and Redshift adapter
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core==1.8.6 dbt-redshift

      - name: dbt-deps
        run: dbt deps --profiles-dir ./integration_tests/profiles/redshift

      - name: dbt-debug
        run: dbt debug --profiles-dir ./integration_tests/profiles/redshift

      # Breaking up dbt build into seed then compile to try and speed up processing
      - name: dbt-seed
        run: |
          dbt seed --full-refresh --profiles-dir ./integration_tests/profiles/redshift

      - name: dbt-compile
        run: |
          dbt compile --profiles-dir ./integration_tests/profiles/redshift

      - name: Get the result
        if: ${{ always() }}
        run: echo "${{ steps.dbt-build.outputs.result }}"
        shell: bash

#######  Snowflake
  snowflake:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dbt-core and Snowflake adapter
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core==1.8.6 dbt-snowflake

      - name: dbt-deps
        run: dbt deps --profiles-dir ./integration_tests/profiles/snowflake

      - name: dbt-debug
        run: dbt debug --profiles-dir ./integration_tests/profiles/snowflake

      - name: dbt-build
        run: |
          dbt build --full-refresh --profiles-dir ./integration_tests/profiles/snowflake

      - name: Get the result
        if: ${{ always() }}
        run: echo "${{ steps.dbt-build.outputs.result }}"
        shell: bash
